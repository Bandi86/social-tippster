name: CI/CD

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: 20

jobs:
  lint-and-test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: process.env.DATABASE_PASSWORD
          POSTGRES_DB: tippmix
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: |
            frontend/package-lock.json
            backend/package-lock.json

      - name: Install frontend dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Install backend dependencies
        working-directory: ./backend
        run: npm ci

      - name: Lint code (if scripts exist)
        run: |
          if [ -f "package.json" ] && npm run lint --dry-run 2>/dev/null; then
            npm run lint
          fi
          if [ -f "package.json" ] && npm run format:check --dry-run 2>/dev/null; then
            npm run format:check
          fi
        continue-on-error: true

      - name: Type check frontend
        working-directory: ./frontend
        run: npm run build
        env:
          NEXT_PUBLIC_API_URL: http://localhost:3001

      - name: Build backend
        working-directory: ./backend
        run: npm run build

      - name: Test backend
        working-directory: ./backend
        run: npm run test
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost:5433/social_tippster_test
          JWT_SECRET: test-jwt-secret
          NODE_ENV: test

      - name: Test frontend (if tests exist)
        working-directory: ./frontend
        run: |
          if [ -f "package.json" ] && npm run test --dry-run 2>/dev/null; then
            npm run test -- --watchAll=false
          else
            echo "No frontend tests found or test script unavailable, skipping..."
          fi
        continue-on-error: true

  build-and-deploy:
    needs: lint-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install frontend dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Install backend dependencies
        working-directory: ./backend
        run: npm ci

      - name: Build frontend
        working-directory: ./frontend
        env:
          NEXT_PUBLIC_API_URL: http://localhost:3001
          NEXT_PUBLIC_APP_NAME: Social Tippster
        run: npm run build

      - name: Build backend
        working-directory: ./backend
        run: npm run build

      - name: Run security audit
        run: |
          cd frontend && npm audit --audit-level=high || true
          cd ../backend && npm audit --audit-level=high || true
        continue-on-error: true

      - name: Deploy to staging/production
        if: success()
        run: |
          echo "ðŸš€ Deployment would happen here"
          echo "Environment: ${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}"
          # Add actual deployment logic here
          # e.g., Vercel, Netlify, AWS, etc.

  security-scan:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
